/*
Creating SAF-formatted reference file
*/

params.options = [:]

process MAKE_SAF {
    container "bioraddbg/omnition-core:${workflow.manifest.version}"
    publishDir "${params.options.reference.directory}/", mode: 'copy', overwrite: true
    label 'cpu_xsmall'
    label 'memory_xsmall'

    input:
    path gtf
    path index
    val images_pulled

    output:
    path 'annotation.saf', emit: saf
    path 'gene_symbols.txt', emit: symbols

    script:
    """
    # Pulling exon records from gtf
    awk 'BEGIN{OFS="\\t";} {if ( tolower(\$3) ~ /exon/ ) {{for(i=1;i<=NF;i++) {if(\$i=="gene_id"){id=\$(i+1)}}} \
        {print \$1,\$4-1,\$5,id,".",\$7}}}' ${gtf} | tr -d '";' > exons_only.bed

    # Pulling utr records from gtf
    awk 'BEGIN{OFS="\\t";} {if ( tolower(\$3) ~ /utr/ ) {{for(i=1;i<=NF;i++) {if(\$i=="gene_id"){id=\$(i+1)}}} \
        {print \$1,\$4-1,\$5,id,".",\$7}}}' ${gtf} | tr -d '";' > utrs.bed

    # Merging all records with the same gene id
    awk 'BEGIN{OFS="\\t";} {print \$4, \$2, \$3, \$1, \$5, \$6}' exons_only.bed | sort -T '.' -k1,1 -k2,2n | \
        bedtools merge -i - -s -c 4,5,6 -o distinct > exons_merged.bed
    awk 'BEGIN{OFS="\\t";} {print \$4, \$2, \$3, \$1, \$5, \$6}' utrs.bed | sort -T '.' -k1,1 -k2,2n | \
        bedtools merge -i - -s -c 4,5,6 -o distinct > utrs_merged.bed

    # Removing exon regions that contain utrs
    bedtools subtract -s -a exons_merged.bed -b utrs_merged.bed > coding.bed

    # Add tags to exons and utrs
    awk 'BEGIN{OFS="\\t";} {print \$4, \$2, \$3, \$1"_UTR", \$5, \$6}' utrs_merged.bed | sort -T \
        '.' -k1,1 -k2,2n > utrs_merged_tagged.bed
    awk 'BEGIN{OFS="\\t";} {print \$4, \$2, \$3, \$1"_EXON", \$5, \$6}' coding.bed | sort -T '.' \
        -k1,1 -k2,2n > coding_tagged.bed

    # Combining coding regions and utrs
    cat coding_tagged.bed utrs_merged_tagged.bed | sort -T '.' -k 1,1 -k2,2n > exons.bed

    # Creating BED file of all gene features
    awk 'BEGIN{OFS="\\t";} {if ( tolower(\$3) == "gene" ) {{for(i=1;i<=NF;i++) {if(\$i=="gene_id"){id=\$(i+1)}}} \
        {print \$1,\$4-1,\$5,id,".",\$7}}}' ${gtf} | tr -d '";' | sort -T '.' -k 1,1 -k2,2n | uniq \
        > genes.bed

    # Creating BED file of intronic regions
    # This needs to be done gene by gene to avoid gaps in any one gene that overlap with any other gene
    GENES=\$(cut -f4 genes.bed | sort | uniq)
    for GENEID in \$GENES;
    do
        bedtools subtract -s -a <(grep \$GENEID genes.bed) -b <(grep \$GENEID exons.bed) | \
        awk 'BEGIN{OFS="\\t";} {\$4=\$4"_INTRON"; print \$0}' >> introns.bed
    done

    # Sorting the chromosome length file generated by STAR
    sort -T '.' -k1 ${index}/chrNameLength.txt > temp.genome

    # Creating strand-specific BED files of intergenic regions
    awk 'BEGIN{OFS="\\t";} \$6=="-" {print \$0}' genes.bed | bedtools complement -i - -g temp.genome | \
        sed 's;\$;\\tINTERGENIC\\t.\\t-;' > minus.intergenic.bed
    awk 'BEGIN{OFS="\\t";} \$6=="+" {print \$0}' genes.bed | bedtools complement -i - -g temp.genome | \
        sed 's;\$;\\tINTERGENIC\\t.\\t+;' > plus.intergenic.bed

    # Combining BED files together and converting to SAF format (feature, chromosome, start, end, strand)
    cat exons.bed introns.bed plus.intergenic.bed minus.intergenic.bed | awk 'BEGIN{OFS="\\t";} \
        {print \$4,\$1,\$2,\$3,\$6}' | sort -T '.' -k2,2 -k3,3n > annotation.saf

    # Creating a text file of the gene symbols for count matrix builds
    awk 'BEGIN{OFS="\\t";} {if ( tolower(\$3) ~ /exon|utr/ ) {id=""; name=""; {for(i=1;i<=NF;i++) \
        {if(\$i=="gene_id"){id=\$(i+1)} else if (\$i=="gene_name") {name=\$(i+1)}}} {if(name=="") \
            {print id, id} else {print id, name}}}}' ${gtf} | tr -d '";' | sort -T '.' | uniq > gene_symbols.txt
    """
}
