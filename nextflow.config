// Pipeline parameters
params {

    // General defaults
    errorStrategy = 'ignore'
    monochrome_logs = null
    diagnostics = null
    prefix = null
    contaminant = null
    qualityScore = 20
    help = null
    external = true

    // Directory defaults
    outputDir = "./results"
    resultsDir = "${params.outputDir}/Sample_Files/"
    reportsDir = "${params.outputDir}/report/"
    assetsDir = "${projectDir}/assets/"

    // Assay defaults
    atac = null

    preset{
        atac{
            includeConfig 'conf/atac_preset.config'
        }
    }

    // Bead defaults
    bead.format = 'barcode3.1'
    bead.length = 51

    // Cell defaults
    cell.loaded = 10000

    // Barcode defaults
    barcode.force = null

    // Resource defaults
    maxCpus = 16
    maxMemory = '120.GB'
    maxTime = '12h'

}


manifest {

    name = 'BioRadOpenSource/omnition'
    description = 'Bio-Rad Omnition analysis software for single-cell data.'
    defaultBranch = 'main'
    mainScript = 'main.nf'
    nextflowVersion = '!>=21.04.0, <=22.10.3'
    version = 'v1.0.1'
    recurseSubmodules = true

}


// Process management settings
process {

    // Cache based on contents
    cache = 'lenient'
    withName: SINGULARITY_PULL {
        cache = false
    }

    // Setting error strategy 
    // 134 = Program aborted
    // 104, 137, 143 = Out of memory
    // 139 = Segfault
    errorStrategy = { task.exitStatus in [104,134,137,139,143] ? 'retry' : params.errorStrategy }
    maxRetries = 2
    maxErrors = -1

    // Dynamic resource configurations
    withLabel: memory_xxsmall {
        memory = { check_max( 0.9375.GB * ( 2 ** ( task.attempt - 1 ) ), 'memory' ) }
        time = { check_max(12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: memory_xsmall {
        memory = { check_max( 3.75.GB * ( 2 ** ( task.attempt - 1 ) ), 'memory' ) }
        time = { check_max(12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: memory_small {
        memory = { check_max( 7.5.GB * ( 2 ** ( task.attempt - 1 ) ), 'memory' ) }
        time = { check_max( 12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: memory_medium {
        memory = { check_max( 15.GB * ( 2 ** ( task.attempt - 1 ) ), 'memory' ) }
        time = { check_max( 12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: memory_large {
        memory = { check_max( 30.GB * ( 2 ** ( task.attempt - 1 ) ), 'memory' ) }
        time = { check_max( 12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: memory_xlarge {
        memory = { check_max( 60.GB * ( 2 ** ( task.attempt - 1 ) ), 'memory' ) }
        time = { check_max( 12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }

    withLabel: cpu_xsmall {
        cpus = { check_max( 1 ,'cpus' ) }
        time = { check_max(12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: cpu_small {
        cpus = { check_max( 2 ,'cpus' ) }
        time = { check_max(12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: cpu_medium {
        cpus = { check_max( 4 ,'cpus' ) }
        time = { check_max(12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: cpu_large {
        cpus = { check_max( 8, 'cpus' ) }
        time = { check_max( 12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }
    withLabel: cpu_xlarge {
        cpus = { check_max( 16, 'cpus' ) }
        time = { check_max( 12.h * ( 2 ** ( task.attempt - 1 ) ), 'time' ) }
    }

}


// Execution profiles for defining container system settings
profiles {

    standard {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "${projectDir}/singularity/"
    }
    
    docker {
        docker.enabled = true
        docker.fixOwnership = true
    }

    demo_atac { 
        includeConfig 'conf/test.config' 
    }

    demo_catac { 
        includeConfig 'conf/test.config' 
    } 

}


// Pipeline execution report settings
def trace_timestamp = new java.util.Date().format( 'yyyyMMdd-HHmmss')
report {
    enabled = true
    file = params.prefix ? "${params.outputDir}/pipeline_info/${params.prefix}-omnition-execution_report-${trace_timestamp}.html" : "${params.outputDir}/pipeline_info/omnition-execution_report-${trace_timestamp}.html"
}
timeline {
    enabled = true
    file = params.prefix ? "${params.outputDir}/pipeline_info/${params.prefix}-omnition-timeline-${trace_timestamp}.html" : "${params.outputDir}/pipeline_info/omnition-timeline-${trace_timestamp}.html"
}
trace {
    enabled = true
    fields = "task_id,hash,native_id,name,status,exit,submit,duration,realtime,cpus,%cpu,peak_rss,peak_vmem,rchar,wchar"
    file = params.prefix ? "${params.outputDir}/pipeline_info/${params.prefix}-omnition-trace-${trace_timestamp}.txt" : "${params.outputDir}/pipeline_info/omnition-trace-${trace_timestamp}.txt"
}
dag {
    enabled = true
    file = params.prefix ? "${params.outputDir}/pipeline_info/${params.prefix}-omnition-dag-${trace_timestamp}.html" : "${params.outputDir}/pipeline_info/omnition-dag-${trace_timestamp}.html"
}


// Function for comparing resource requests to available resources
def check_max(obj, type) {
    if (type == 'cpus') {

        try {
            return Math.min( obj, params.maxCpus as int )
        } catch (all) {
            println "[ERROR] Max cpus '${params.maxCpus}' is not valid. Using default value: $obj"
            return obj
        }

    } else if (type == 'memory') {

        try {
            if (obj.compareTo(params.maxMemory as nextflow.util.MemoryUnit) == 1)
                return params.maxMemory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "[ERROR] Max memory '${params.maxMemory}' is not valid. Using default value: $obj"
            return obj
        }

    } else if (type == 'time') {

        try {
            if (obj.compareTo(params.maxTime as nextflow.util.Duration) == 1)
                return params.maxTime as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "[ERROR] Max time '${params.maxTime}' is not valid. Using default value: $obj"
            return obj
        }
    }
}
